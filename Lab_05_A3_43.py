# -*- coding: utf-8 -*-
"""Lab 5 _Decision Tree .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19fzOfSCwY_AupRT2W3oIrbBHb0rYfNtB
"""



"""## LAB 5
## Decision Tree Classifier

## Aim :- To build a Decision Tree Classifier to predict the safety of the car. Build two models, one with criterion gini index and another one with criterion entropy.

## Step 1 :- Import Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import warnings
warnings.filterwarnings('ignore')

import os
import pandas as pd

data = '/kaggle/input/car-evaluation-data-set/car_evaluation.csv'

# Check if the file exists
if os.path.exists(data):
    df = pd.read_csv(data)
else:
    print(f"Error: File not found at {data}. Please check the file path.")

"""## Step 2 :- Import Dataset"""

df = pd.read_csv('car_evaluation.csv')
df.head()

"""## Step 3:- Exploratory data analysis"""

df.shape

df.head()

df.tail()

col_names = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']


df.columns = col_names

col_names

df.info()

col_names = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']


for col in col_names:

    print(df[col].value_counts())

df.isnull().sum()

X = df.drop(['class'], axis=1)

y = df['class']

"""## Step 4:- Splitting the dataset"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)

X_train.shape, X_test.shape

X_train.dtypes

X_train.head()

X_train.head()

X_test.head()

"""## Decision Tree Classifier with Gini Index"""

from sklearn.tree import DecisionTreeClassifier

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Assuming X_train contains the column with 'vhigh' values,
# replace 'buying' with the actual column name if 'buying' is the column you are targeting.
# Please inspect your X_train dataframe to identify the correct column name.
column_name = 'buying'  # Replace 'buying' with the actual column name

# Create a LabelEncoder object
label_encoder = LabelEncoder()

# Fit the encoder to the unique values in the column
label_encoder.fit(X_train[column_name].unique())

# Transform the column in both training and test sets
X_train[column_name] = label_encoder.transform(X_train[column_name])
X_test[column_name] = label_encoder.transform(X_test[column_name])

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier

# Assuming X_train contains the column with 'vhigh' values,
# replace 'buying' with the actual column name if 'buying' is not the correct column
# Please inspect your X_train dataframe to identify the correct column name.
columns_to_encode = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety']  # Add all relevant columns here

# Create a LabelEncoder object
label_encoder = LabelEncoder()

# Iterate over all columns to be encoded and transform in both X_train and X_test
for column in columns_to_encode:
    # Fit the encoder to the unique values in the column, considering both train and test data
    label_encoder.fit(pd.concat([X_train[column], X_test[column]]).unique())

    # Transform the column in both training and test sets
    X_train[column] = label_encoder.transform(X_train[column])
    X_test[column] = label_encoder.transform(X_test[column])


clf_gini = DecisionTreeClassifier(criterion='gini', max_depth=3, random_state=0)
clf_gini.fit(X_train, y_train)

y_pred_gini = clf_gini.predict(X_test)

from sklearn.metrics import accuracy_score

print('Model accuracy score with criterion gini index: {0:0.4f}'. format(accuracy_score(y_test, y_pred_gini)))

y_pred_train_gini = clf_gini.predict(X_train)

y_pred_train_gini

print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train_gini)))

print('Training set score: {:.4f}'.format(clf_gini.score(X_train, y_train)))

print('Test set score: {:.4f}'.format(clf_gini.score(X_test, y_test)))

plt.figure(figsize=(12,8))

from sklearn import tree

tree.plot_tree(clf_gini.fit(X_train, y_train))

import graphviz
dot_data = tree.export_graphviz(clf_gini, out_file=None,
                              feature_names=X_train.columns,
                              class_names=y_train,
                              filled=True, rounded=True,
                              special_characters=True)

graph = graphviz.Source(dot_data)

graph

"""## Decision Tree Classifier with Entropy"""

clf_en = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0)

clf_en.fit(X_train, y_train)

y_pred_en = clf_en.predict(X_test)

from sklearn.metrics import accuracy_score

print('Model accuracy score with criterion entropy: {0:0.4f}'. format(accuracy_score(y_test, y_pred_en)))

y_pred_train_en = clf_en.predict(X_train)

y_pred_train_en

print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train_en)))

print('Training set score: {:.4f}'.format(clf_en.score(X_train, y_train)))

print('Test set score: {:.4f}'.format(clf_en.score(X_test, y_test)))

plt.figure(figsize=(12,8))

from sklearn import tree

tree.plot_tree(clf_en.fit(X_train, y_train))

import graphviz
dot_data = tree.export_graphviz(clf_en, out_file=None,
                              feature_names=X_train.columns,
                              class_names=y_train,
                              filled=True, rounded=True,
                              special_characters=True)

graph = graphviz.Source(dot_data)

graph

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred_en)

print('Confusion matrix\n\n', cm)

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred_en))

"""## Conclusion :- We learnt how decision trees function on a dataset and understood how to build models, one with criterion gini index and another one with criterion entropy.   """

