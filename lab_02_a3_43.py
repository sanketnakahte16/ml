# -*- coding: utf-8 -*-
"""lab_02_A3_44.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O8UyMq6DNzTOHkUDNbnCQ_aTOoRy2DG0
"""

## Lab - 02
## Linear Regression Machine Learning Model
## Objectives-
##Learn to implement the model fw,b for linear regression with one variable
##housing price prediction
##Model function creation
##Prediction

import numpy as np ## for scientific plotting
import matplotlib.pyplot as plt ## for plotting data

# Problem Statement - Housing price prediction with two attributes:Size and Price

x_train = np.array([1.0, 2.0, 3.0]) # input size of the houses
y_train = np.array([300.0, 500.0, 800.0]) # input price of houses
print(f"x_train = {x_train}")
print(f"y_train = {y_train}")

print(f"x_train.shape: {x_train.shape}")
m = x_train.shape[0]  # m is the number of training examples
print(f"Number of training examples is: {m}")

m = len(x_train)
print(f"Number of training examples is: {m}")

i = 0

x_i = x_train[i]
y_i = y_train[i]
print(f"(x^({i}), y^({i})) = ({x_i}, {y_i})")

plt.scatter(x_train, y_train, marker='x', c='r') # Plot the data point
plt.title("Housing Prices") # Set the title
plt.ylabel('Price (in 1000s of dollars)') # Set the y-axis label
plt.xlabel('Size (1000 sqft)') # Set the x-axis label
plt.show()

## Model function for linear regression
## fw,b(x ) = w + b

w = 200
b = 150
print(f"w: {w}")
print(f"b: {b}")

def compute_model_output(x, w, b):
    """
    Computes the prediction of a linear model
    Args:
    x (ndarray (m,)): Data, m examples
    w,b (scalar) : model parameters
    Returns
    f_wb (ndarray (m,)): model prediction
    """
    m = x.shape[0]
    f_wb = np.zeros(m)
    for i in range(m):
        f_wb[i] = w * x[i] + b

    return f_wb

tmp_f_wb = compute_model_output(x_train, w, b,)
plt.plot(x_train, tmp_f_wb, c='b',label='Our Prediction')# Plot our model prediction
plt.scatter(x_train, y_train, marker='x', c='r',label='Actual Values') # Plot the data points
plt.title("Housing Prices") # Set the title
plt.ylabel('Price (in 1000s of dollars)') # Set the y-axis label
plt.xlabel('Size (1000 sqft)') # Set the x-axis label
plt.legend()
plt.show()

