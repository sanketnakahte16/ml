# -*- coding: utf-8 -*-
"""SVM_05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pTSqpVc_g10FGTQqswC4XNJSMyFrv13_

## Lab 4 : SVM and SVR

## Aim : To study SVM and SVR

## Step 1 : Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Step 2 : Uploading the dataset"""

dataset = pd.read_csv('parkinsons_new.csv')

"""## Step 3 : Exploratory Data Analysis"""

dataset.head()

dataset.tail()

dataset.shape

dataset.columns

dataset.info()

dataset.describe()

pd.isnull(dataset).sum()

dataset = dataset.drop(['name'], axis=1)
dataset = pd.get_dummies(dataset, prefix_sep='sex')
dataset.head()

X = dataset.loc[:, dataset.columns !="status"]
y = dataset["status"]

X.head()

y.head()

"""## Step 4 : Training and splitting the dataset"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state =0)

print ("Dimension for X train:", X_train.shape)
print ("Dimension for X test:", X_test.shape)
print ("Dimension for y train:", y_train.shape)
print ("Dimension for y test:", y_test.shape)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler().fit(X_train)
X_train = sc.transform(X_train)
X_test = sc.transform(X_test)

X_train = pd.DataFrame(X_train, columns=X.columns)
X_train.head()

X_test = pd.DataFrame(X_test, columns=X.columns)
X_test.head()

"""## Model Testing"""

from sklearn import svm
cl = svm.SVC(kernel='linear', C=0.01)
cl.fit(X_train, y_train)

y_pred = cl.predict(X_train)

y_pred_1 = cl.predict(X_test)
y_pred_1

from sklearn.metrics import accuracy_score, confusion_matrix
cm = confusion_matrix(y_test, y_pred_1)
cm

acc = accuracy_score(y_test, y_pred_1)
acc

cl.n_support_

from sklearn.model_selection import GridSearchCV
parameters = {'C': [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100, 500, 1000, 5000],
              'degree': [2, 3, 4, 5],
              'gamma':[0.001, 0.01, 0.1, 0.5, 1],
              'kernel': ['rbf','poly']
              }
cl = svm.SVC()
grid = GridSearchCV(cl, parameters, cv=10)
grid.fit(X_train, y_train)
print(grid.best_params_)
print(grid.best_estimator_)

from sklearn.metrics import classification_report
grid_prediction = grid.predict(X_test)
print(classification_report(y_test, grid_prediction))

"""## Conclusion : We learnt how to perform SVM and SVR"""

